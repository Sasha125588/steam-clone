// This file is auto-generated by @hey-api/openapi-ts

export type Position = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Slug
	 */
	readonly slug?: string
}

export type Person = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Image
	 */
	readonly image?: string
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
}

export type PersonSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Image
	 */
	readonly image?: string
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Reviews count
	 */
	readonly reviews_count?: number
	/**
	 * Rating
	 */
	readonly rating?: string
	/**
	 * Rating top
	 */
	readonly rating_top?: number
	/**
	 * Updated
	 */
	readonly updated?: string
}

export type Developer = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
}

export type DeveloperSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
}

export type Game = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Released
	 */
	readonly released?: string
	/**
	 * TBA
	 */
	readonly tba?: boolean
	/**
	 * Background image
	 */
	readonly background_image?: string
	/**
	 * Rating
	 */
	rating: number
	/**
	 * Rating top
	 */
	readonly rating_top?: number
	/**
	 * Ratings count
	 */
	readonly ratings_count?: number
	/**
	 * Reviews text count
	 */
	readonly reviews_text_count?: string
	/**
	 * Added
	 */
	readonly added?: number
	/**
	 * Metacritic
	 */
	readonly metacritic?: number
	/**
	 * Playtime
	 * in hours
	 */
	readonly playtime?: number
	/**
	 * Suggestions count
	 */
	readonly suggestions_count?: number
	/**
	 * Updated
	 */
	readonly updated?: string
	esrb_rating?: {
		id?: number
		slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending'
		name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending'
	} | null
	platforms?: Array<{
		platform?: {
			id?: number
			slug?: string
			name?: string
		}
		released_at?: string | null
		requirements?: {
			minimum?: string
			recommended?: string
		} | null
	}>
}

export type GamePersonList = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Image
	 */
	readonly image?: string
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
}

export type ScreenShot = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Image
	 * An image file with size up to 20 MB.
	 */
	readonly image?: string
	/**
	 * Hidden
	 * Set image as hidden or visible.
	 */
	hidden?: boolean
	/**
	 * Width
	 */
	readonly width?: number
	/**
	 * Height
	 */
	readonly height?: number
}

export type GameStoreFull = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Game id
	 */
	readonly game_id?: string
	/**
	 * Store id
	 */
	readonly store_id?: string
	/**
	 * Url
	 */
	url: string
}

export type GamePlatformMetacritic = {
	/**
	 * Metascore
	 */
	readonly metascore?: number
	/**
	 * Url
	 */
	readonly url?: string
}

export type GameSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Name original
	 */
	readonly name_original?: string
	/**
	 * Description
	 */
	readonly description?: string
	/**
	 * Metacritic
	 */
	readonly metacritic?: number
	readonly metacritic_platforms?: Array<GamePlatformMetacritic>
	/**
	 * Released
	 */
	readonly released?: string
	/**
	 * TBA
	 */
	readonly tba?: boolean
	/**
	 * Updated
	 */
	readonly updated?: string
	/**
	 * Background image
	 */
	readonly background_image?: string
	/**
	 * Background image additional
	 */
	readonly background_image_additional?: string
	/**
	 * Website
	 */
	readonly website?: string
	/**
	 * Rating
	 */
	rating: number
	/**
	 * Rating top
	 */
	readonly rating_top?: number
	/**
	 * Added
	 */
	readonly added?: number
	/**
	 * Playtime
	 * in hours
	 */
	readonly playtime?: number
	/**
	 * Screenshots count
	 */
	readonly screenshots_count?: number
	/**
	 * Movies count
	 */
	readonly movies_count?: number
	/**
	 * Creators count
	 */
	readonly creators_count?: number
	/**
	 * Achievements count
	 */
	readonly achievements_count?: number
	/**
	 * Parent achievements count
	 */
	readonly parent_achievements_count?: string
	/**
	 * Reddit url
	 * For example "https://www.reddit.com/r/uncharted/" or "uncharted"
	 */
	readonly reddit_url?: string
	/**
	 * Reddit name
	 */
	readonly reddit_name?: string
	/**
	 * Reddit description
	 */
	readonly reddit_description?: string
	/**
	 * Reddit logo
	 */
	readonly reddit_logo?: string
	/**
	 * Reddit count
	 */
	readonly reddit_count?: number
	/**
	 * Twitch count
	 */
	readonly twitch_count?: string
	/**
	 * Youtube count
	 */
	readonly youtube_count?: string
	/**
	 * Reviews text count
	 */
	readonly reviews_text_count?: string
	/**
	 * Ratings count
	 */
	readonly ratings_count?: number
	/**
	 * Suggestions count
	 */
	readonly suggestions_count?: number
	readonly alternative_names?: Array<string>
	/**
	 * Metacritic url
	 * For example "http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt"
	 */
	readonly metacritic_url?: string
	/**
	 * Parents count
	 */
	readonly parents_count?: number
	/**
	 * Additions count
	 */
	readonly additions_count?: number
	/**
	 * Game series count
	 */
	readonly game_series_count?: number
	esrb_rating?: {
		id?: number
		slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending'
		name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending'
	} | null
	platforms?: Array<{
		platform?: {
			id?: number
			slug?: string
			name?: string
		}
		released_at?: string | null
		requirements?: {
			minimum?: string
			recommended?: string
		} | null
	}>
}

export type ParentAchievement = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Description
	 */
	readonly description?: string
	/**
	 * Image
	 */
	readonly image?: string
	/**
	 * Percent
	 */
	readonly percent?: string
}

export type Movie = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Preview
	 */
	readonly preview?: string
	/**
	 * Data
	 */
	readonly data?: {
		[key: string]: unknown
	}
}

export type Reddit = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Text
	 */
	readonly text?: string
	/**
	 * Image
	 */
	readonly image?: string
	/**
	 * Url
	 */
	readonly url?: string
	/**
	 * Username
	 */
	readonly username?: string
	/**
	 * Username url
	 */
	readonly username_url?: string
	/**
	 * Created
	 */
	readonly created?: string
}

export type Twitch = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * External id
	 */
	readonly external_id?: number
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Description
	 */
	readonly description?: string
	/**
	 * Created
	 */
	readonly created?: string
	/**
	 * Published
	 */
	readonly published?: string
	/**
	 * Thumbnail
	 */
	readonly thumbnail?: string
	/**
	 * View count
	 */
	readonly view_count?: number
	/**
	 * Language
	 */
	readonly language?: string
}

export type Youtube = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * External id
	 */
	readonly external_id?: string
	/**
	 * Channel id
	 */
	readonly channel_id?: string
	/**
	 * Channel title
	 */
	readonly channel_title?: string
	/**
	 * Name
	 */
	readonly name?: string
	/**
	 * Description
	 */
	readonly description?: string
	/**
	 * Created
	 */
	readonly created?: string
	/**
	 * View count
	 */
	readonly view_count?: number
	/**
	 * Comments count
	 */
	readonly comments_count?: number
	/**
	 * Like count
	 */
	readonly like_count?: number
	/**
	 * Dislike count
	 */
	readonly dislike_count?: number
	/**
	 * Favorite count
	 */
	readonly favorite_count?: number
	/**
	 * Thumbnails
	 */
	readonly thumbnails?: {
		[key: string]: unknown
	}
}

export type Genre = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
}

export type GenreSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
}

export type Platform = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Image
	 */
	readonly image?: string | null
	/**
	 * Year start
	 */
	year_start?: number | null
	/**
	 * Year end
	 */
	year_end?: number | null
}

export type PlatformParentSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	platforms: Array<Platform>
}

export type PlatformSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
	/**
	 * Image
	 */
	readonly image?: string | null
	/**
	 * Year start
	 */
	year_start?: number | null
	/**
	 * Year end
	 */
	year_end?: number | null
}

export type Publisher = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
}

export type PublisherSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
}

export type Store = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Domain
	 */
	domain?: string | null
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
}

export type StoreSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Domain
	 */
	domain?: string | null
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
}

export type Tag = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Language
	 */
	readonly language?: string
}

export type TagSingle = {
	/**
	 * ID
	 */
	readonly id?: number
	/**
	 * Name
	 */
	name: string
	/**
	 * Slug
	 */
	readonly slug?: string
	/**
	 * Games count
	 */
	readonly games_count?: number
	/**
	 * Image background
	 */
	readonly image_background?: string
	/**
	 * Description
	 */
	description?: string
}

export type PersonWritable = {
	/**
	 * Name
	 */
	name: string
}

export type PersonSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
}

export type DeveloperWritable = {
	/**
	 * Name
	 */
	name: string
}

export type DeveloperSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
}

export type GameWritable = {
	/**
	 * Rating
	 */
	rating: number
	esrb_rating?: {
		id?: number
		slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending'
		name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending'
	} | null
	platforms?: Array<{
		platform?: {
			id?: number
			slug?: string
			name?: string
		}
		released_at?: string | null
		requirements?: {
			minimum?: string
			recommended?: string
		} | null
	}>
}

export type GamePersonListWritable = {
	/**
	 * Name
	 */
	name: string
}

export type ScreenShotWritable = {
	/**
	 * Hidden
	 * Set image as hidden or visible.
	 */
	hidden?: boolean
}

export type GameStoreFullWritable = {
	/**
	 * Url
	 */
	url: string
}

export type GameSingleWritable = {
	/**
	 * Rating
	 */
	rating: number
	esrb_rating?: {
		id?: number
		slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending'
		name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending'
	} | null
	platforms?: Array<{
		platform?: {
			id?: number
			slug?: string
			name?: string
		}
		released_at?: string | null
		requirements?: {
			minimum?: string
			recommended?: string
		} | null
	}>
}

export type GenreWritable = {
	/**
	 * Name
	 */
	name: string
}

export type GenreSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
}

export type PlatformWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Year start
	 */
	year_start?: number | null
	/**
	 * Year end
	 */
	year_end?: number | null
}

export type PlatformParentSingleWritable = {
	/**
	 * Name
	 */
	name: string
	platforms: Array<PlatformWritable>
}

export type PlatformSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
	/**
	 * Year start
	 */
	year_start?: number | null
	/**
	 * Year end
	 */
	year_end?: number | null
}

export type PublisherWritable = {
	/**
	 * Name
	 */
	name: string
}

export type PublisherSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
}

export type StoreWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Domain
	 */
	domain?: string | null
}

export type StoreSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Domain
	 */
	domain?: string | null
	/**
	 * Description
	 */
	description?: string
}

export type TagWritable = {
	/**
	 * Name
	 */
	name: string
}

export type TagSingleWritable = {
	/**
	 * Name
	 */
	name: string
	/**
	 * Description
	 */
	description?: string
}

export type CreatorRolesListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/creator-roles'
}

export type CreatorRolesListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Position>
	}
}

export type CreatorRolesListResponse = CreatorRolesListResponses[keyof CreatorRolesListResponses]

export type CreatorsListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/creators'
}

export type CreatorsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Person>
	}
}

export type CreatorsListResponse = CreatorsListResponses[keyof CreatorsListResponses]

export type CreatorsReadData = {
	body?: never
	path: {
		id: string
	}
	query?: never
	url: '/creators/{id}'
}

export type CreatorsReadResponses = {
	200: PersonSingle
}

export type CreatorsReadResponse = CreatorsReadResponses[keyof CreatorsReadResponses]

export type DevelopersListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/developers'
}

export type DevelopersListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Developer>
	}
}

export type DevelopersListResponse = DevelopersListResponses[keyof DevelopersListResponses]

export type DevelopersReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Developer.
		 */
		id: number
	}
	query?: never
	url: '/developers/{id}'
}

export type DevelopersReadResponses = {
	200: DeveloperSingle
}

export type DevelopersReadResponse = DevelopersReadResponses[keyof DevelopersReadResponses]

export type GamesListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
		/**
		 * Search query.
		 */
		search?: string
		/**
		 * Disable fuzziness for the search query.
		 */
		search_precise?: boolean
		/**
		 * Mark the search query as exact.
		 */
		search_exact?: boolean
		/**
		 * Filter by parent platforms, for example: `1,2,3`.
		 */
		parent_platforms?: string
		/**
		 * Filter by platforms, for example: `4,5`.
		 */
		platforms?: string
		/**
		 * Filter by stores, for example: `5,6`.
		 */
		stores?: string
		/**
		 * Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`.
		 */
		developers?: string
		/**
		 * Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`.
		 */
		publishers?: string
		/**
		 * Filter by genres, for example: `4,51` or `action,indie`.
		 */
		genres?: string
		/**
		 * Filter by tags, for example: `31,7` or `singleplayer,multiplayer`.
		 */
		tags?: string
		/**
		 * Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`.
		 */
		creators?: string
		/**
		 * Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`.
		 */
		dates?: string
		/**
		 * Filter by an update date, for example: `2020-12-01,2020-12-31`.
		 */
		updated?: string
		/**
		 * Filter by platforms count, for example: `1`.
		 */
		platforms_count?: number
		/**
		 * Filter by a metacritic rating, for example: `80,100`.
		 */
		metacritic?: string
		/**
		 * Exclude games from a particular collection, for example: `123`.
		 */
		exclude_collection?: number
		/**
		 * Exclude additions.
		 */
		exclude_additions?: boolean
		/**
		 * Exclude games which have additions.
		 */
		exclude_parents?: boolean
		/**
		 * Exclude games which included in a game series.
		 */
		exclude_game_series?: boolean
		/**
		 * Exclude stores, for example: `5,6`.
		 */
		exclude_stores?: string
		/**
		 * Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`.
		 */
		ordering?: string
	}
	url: '/games'
}

export type GamesListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Game>
	}
}

export type GamesListResponse = GamesListResponses[keyof GamesListResponses]

export type GamesAdditionsListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/additions'
}

export type GamesAdditionsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Game>
	}
}

export type GamesAdditionsListResponse =
	GamesAdditionsListResponses[keyof GamesAdditionsListResponses]

export type GamesDevelopmentTeamListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/development-team'
}

export type GamesDevelopmentTeamListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<GamePersonList>
	}
}

export type GamesDevelopmentTeamListResponse =
	GamesDevelopmentTeamListResponses[keyof GamesDevelopmentTeamListResponses]

export type GamesGameSeriesListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/game-series'
}

export type GamesGameSeriesListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Game>
	}
}

export type GamesGameSeriesListResponse =
	GamesGameSeriesListResponses[keyof GamesGameSeriesListResponses]

export type GamesParentGamesListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/parent-games'
}

export type GamesParentGamesListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Game>
	}
}

export type GamesParentGamesListResponse =
	GamesParentGamesListResponses[keyof GamesParentGamesListResponses]

export type GamesScreenshotsListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/screenshots'
}

export type GamesScreenshotsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<ScreenShot>
	}
}

export type GamesScreenshotsListResponse =
	GamesScreenshotsListResponses[keyof GamesScreenshotsListResponses]

export type GamesStoresListData = {
	body?: never
	path: {
		game_pk: string
	}
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/games/{game_pk}/stores'
}

export type GamesStoresListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<GameStoreFull>
	}
}

export type GamesStoresListResponse = GamesStoresListResponses[keyof GamesStoresListResponses]

export type GamesReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}'
}

export type GamesReadResponses = {
	200: GameSingle
}

export type GamesReadResponse = GamesReadResponses[keyof GamesReadResponses]

export type GamesAchievementsReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/achievements'
}

export type GamesAchievementsReadResponses = {
	200: ParentAchievement
}

export type GamesAchievementsReadResponse =
	GamesAchievementsReadResponses[keyof GamesAchievementsReadResponses]

export type GamesMoviesReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/movies'
}

export type GamesMoviesReadResponses = {
	200: Movie
}

export type GamesMoviesReadResponse = GamesMoviesReadResponses[keyof GamesMoviesReadResponses]

export type GamesRedditReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/reddit'
}

export type GamesRedditReadResponses = {
	200: Reddit
}

export type GamesRedditReadResponse = GamesRedditReadResponses[keyof GamesRedditReadResponses]

export type GamesSuggestedReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/suggested'
}

export type GamesSuggestedReadResponses = {
	200: GameSingle
}

export type GamesSuggestedReadResponse =
	GamesSuggestedReadResponses[keyof GamesSuggestedReadResponses]

export type GamesTwitchReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/twitch'
}

export type GamesTwitchReadResponses = {
	200: Twitch
}

export type GamesTwitchReadResponse = GamesTwitchReadResponses[keyof GamesTwitchReadResponses]

export type GamesYoutubeReadData = {
	body?: never
	path: {
		/**
		 * An ID or a slug identifying this Game.
		 */
		id: string
	}
	query?: never
	url: '/games/{id}/youtube'
}

export type GamesYoutubeReadResponses = {
	200: Youtube
}

export type GamesYoutubeReadResponse = GamesYoutubeReadResponses[keyof GamesYoutubeReadResponses]

export type GenresListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/genres'
}

export type GenresListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Genre>
	}
}

export type GenresListResponse = GenresListResponses[keyof GenresListResponses]

export type GenresReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Genre.
		 */
		id: number
	}
	query?: never
	url: '/genres/{id}'
}

export type GenresReadResponses = {
	200: GenreSingle
}

export type GenresReadResponse = GenresReadResponses[keyof GenresReadResponses]

export type PlatformsListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/platforms'
}

export type PlatformsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Platform>
	}
}

export type PlatformsListResponse = PlatformsListResponses[keyof PlatformsListResponses]

export type PlatformsListsParentsListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/platforms/lists/parents'
}

export type PlatformsListsParentsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<PlatformParentSingle>
	}
}

export type PlatformsListsParentsListResponse =
	PlatformsListsParentsListResponses[keyof PlatformsListsParentsListResponses]

export type PlatformsReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Platform.
		 */
		id: number
	}
	query?: never
	url: '/platforms/{id}'
}

export type PlatformsReadResponses = {
	200: PlatformSingle
}

export type PlatformsReadResponse = PlatformsReadResponses[keyof PlatformsReadResponses]

export type PublishersListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/publishers'
}

export type PublishersListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Publisher>
	}
}

export type PublishersListResponse = PublishersListResponses[keyof PublishersListResponses]

export type PublishersReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Publisher.
		 */
		id: number
	}
	query?: never
	url: '/publishers/{id}'
}

export type PublishersReadResponses = {
	200: PublisherSingle
}

export type PublishersReadResponse = PublishersReadResponses[keyof PublishersReadResponses]

export type StoresListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * Which field to use when ordering the results.
		 */
		ordering?: string
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/stores'
}

export type StoresListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Store>
	}
}

export type StoresListResponse = StoresListResponses[keyof StoresListResponses]

export type StoresReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Store.
		 */
		id: number
	}
	query?: never
	url: '/stores/{id}'
}

export type StoresReadResponses = {
	200: StoreSingle
}

export type StoresReadResponse = StoresReadResponses[keyof StoresReadResponses]

export type TagsListData = {
	body?: never
	path?: never
	query?: {
		/**
		 * A page number within the paginated result set.
		 */
		page?: number
		/**
		 * Number of results to return per page.
		 */
		page_size?: number
	}
	url: '/tags'
}

export type TagsListResponses = {
	200: {
		count: number
		next?: string | null
		previous?: string | null
		results: Array<Tag>
	}
}

export type TagsListResponse = TagsListResponses[keyof TagsListResponses]

export type TagsReadData = {
	body?: never
	path: {
		/**
		 * A unique integer value identifying this Tag.
		 */
		id: number
	}
	query?: never
	url: '/tags/{id}'
}

export type TagsReadResponses = {
	200: TagSingle
}

export type TagsReadResponse = TagsReadResponses[keyof TagsReadResponses]

export type ClientOptions = {
	baseUrl: 'https://api.rawg.io/api' | (string & {})
}
